<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">


    <!-- 扫描，扫描注解类(除了控制层) -->
    <context:component-scan base-package="com.leike.mapper">
        <context:exclude-filter type="annotation"
                                expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- 加载资源文件 -->
    <context:property-placeholder
            location="classpath:jdbc.properties"/>
    <!-- 配置数据源 本项目使用c3p0连接池-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!--如果有需要,请把所有的属性全部写到properties文件当中去-->
        <!-- c3po链接池的私有属性 -->
        <property name="initialPoolSize" value="10"/>
        <property name="maxPoolSize" value="30"/>
        <property name="minPoolSize" value="10"/>
        <!-- 关闭连接后不自动commit-->
        <property name="autoCommitOnClose" value="false"/>
        <!-- 获取链接超时时间 -->
        <property name="checkoutTimeout" value="100000"/>
        <!-- 当获取连接失败重试次数 -->
        <property name="acquireRetryAttempts" value="2"/>
    </bean>

    <!-- 最后关键一步 , 如何整合mybatis -->
    <!-- 1. 注入一股mybatis的sqlsessionFactiry 这就是我们所做的关键
         2. 声明式的事物管理   -->
    <!-- myBatis的工厂类 -->
    <bean id="SqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!-- 引入mappers文件 -->
        <!-- 这里要求所有的mapper文件必须放在com/leike/mapper/之下
             自动扫描mapper目录, 省掉Configuration.xml里的手工配置 -->
        <property name="mapperLocations"
                  value="classpath:com/leike/mapper/**/*.xml"/>
        <property name="configuration">
            <bean class="org.apache.ibatis.session.Configuration">
                <!-- 可以使用驼峰命名 , 其它mybatis的配置也就是mybatis.cfg.xml的相关配置 -->
                <property name="mapUnderscoreToCamelCase" value="true"/>
            </bean>
        </property>

        <!-- 插件配置 -->
        <property name="plugins">
            <array>
                <!-- 分页插件的配置 , 拦截器实现分页功能 -->
                <bean class="com.github.pagehelper.PageInterceptor">
                    <property name="properties">
                        <!-- 这里的几个配置主要演示如何使用 , 如果不理解 ,一定要去掉下面的配置 -->
                        <value>
                            <!--***-->
<!--                            helperDialect=mysql-->
<!--                            reasonable=true-->
<!--                            supportMethodsArguments=true-->
<!--                            params=count=countSql-->
<!--                            autoRuntimeDialect=true-->
                        </value>
                    </property>
                </bean>
            </array>
        </property>
        <!-- 配置数据库表对应的java实体类 -->
        <!--        <property name="typeAliasesPackage" value="com.leike.dao"/>-->
    </bean>

    <!-- 持久层接口 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.leike.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="SqlSessionFactoryBean"/>
    </bean>

    <!-- 配置事务管理组件 -->
    <!-- 事务管理 使用数据源事务管理类进行管理 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!-- 确定事务管理的策略transaction-manager:指向上面的transaction -->
    <tx:advice transaction-manager="transactionManager" id="transactionAdvice">
        <!--事务处理的相关值以及它的传播性 -->
        <tx:attributes>
            <tx:method name="select*" read-only="true"/>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="query*" read-only="true"/>
            <tx:method name="delete*" propagation="REQUIRED"
                       rollback-for="Exception"/>
            <tx:method name="update*" propagation="REQUIRED"
                       rollback-for="Exception"/>
            <tx:method name="insert*" propagation="REQUIRED"
                       rollback-for="Exception"/>
            <tx:method name="add*" propagation="REQUIRED"
                       rollback-for="Exception"/>
        </tx:attributes>
    </tx:advice>
    <!-- 使用AOP对事务管理的范围进行织入 明确几个点
         1. 对哪些地方需要进行事务的管理 execution 书写 , 明确边界
         2. 使用什么策略去管理 我们使用tx:advice全部书写于其中 , 在我们的aop的advisor当中只需要去引用这个事务管理者的建议即可-->
    <aop:config>
        <aop:pointcut expression="execution(* com.leike.service..*.*(..))"
                      id="txCut"/>
        <aop:advisor advice-ref="transactionAdvice" pointcut-ref="txCut"/>
    </aop:config>
    <!-- 采用注解进行事务配置 , 请在Service的实现类上面加上@Transanctional注解 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
</beans>